---
test_name: Test parametrizing using 'vals' directly and not in the list

marks:
  - parametrize:
      key: mycoolvalue
      vals:
        $ext:
          function: ext_functions:return_list_vals

stages:
  - name: Echo back parametrized value
    request:
      url: "{global_host}/echo"
      method: POST
      json: !force_format_include "{mycoolvalue}"
    response:
      status_code: 200
      json: !force_format_include "{tavern.request_vars.json}"

---
test_name: Test parametrizing using 'vals' directly and not in the list, list key

marks:
  - parametrize:
      key:
        - mycoolvalue
      vals:
        $ext:
          function: ext_functions:return_list_vals

stages:
  - name: Echo back parametrized value
    request:
      url: "{global_host}/echo"
      method: POST
      json: !force_format_include "{mycoolvalue}"
    response:
      status_code: 200
      json: !force_format_include "{tavern.request_vars.json}"

---
test_name: Test echo parametrized

includes:
  - !include common.yaml

marks:
  - parametrize:
      key: to_send
      vals:
        - abc
        - def
        - "123"

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{to_send}"
    response:
      status_code: 200
      json:
        value: "{to_send}"

---
test_name: Test multiple parametrized values

includes:
  - !include common.yaml

marks:
  - parametrize:
      key: fruit
      vals:
        - apple
        - orange
        - pear
  - parametrize:
      key: edible
      vals:
        - rotten
        - fresh
        - unripe

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{fruit}-{edible}"
    response:
      status_code: 200
      json:
        value: "{fruit}-{edible}"

---
test_name: Test multiple parametrized values, mismatched amounts

includes:
  - !include common.yaml

marks:
  - parametrize:
      key: fruit
      vals:
        - apple
        - orange
        - pear
  - parametrize:
      key: edible
      vals:
        - rotten

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{fruit}-{edible}"
    response:
      status_code: 200
      json:
        value: "{fruit}-{edible}"

---
test_name: Test skip parametrized

includes:
  - !include common.yaml

marks:
  - skip
  - parametrize:
      key: to_send
      vals:
        - abc
        - def
        - "123"

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{to_send}"
    response:
      status_code: 503
      json:
        value: "klskdfiogj4iji34o"

---
test_name: Test skipif parametrized

includes:
  - !include common.yaml

marks:
  - skipif: "2 > 1"
  - parametrize:
      key: to_send
      vals:
        - abc
        - def
        - "123"

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{to_send}"
    response:
      status_code: 503
      json:
        value: "klskdfiogj4iji34o"

#This is now a validation error
#---
#
#test_name: Test empty vals raises error
#
#includes:
#  - !include common.yaml
#
#marks:
#  - parametrize:
#      key: to_send
#      vals:
#
#_xfail: verify
#
#stages:
#  - name: Echo back a unicode value and make sure it matches
#    request:
#      url: "{host}/echo"
#      method: POST
#      json:
#        value: "{to_send}"
#    response:
#      status_code: 200
#      json:
#        value: "{to_send}"

---
test_name: Test invalid parametrize vals raises an error

includes:
  - !include common.yaml

marks:
  - parametrize:
      key: to_send
      vals:
        a: b

_xfail: verify

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{to_send}"
    response:
      status_code: 200
      json:
        value: "{to_send}"

---
test_name: Test parametrize without include

marks:
  - parametrize:
      key: to_send
      vals:
        - abc

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "http://localhost:5003/echo"
      method: POST
      json:
        value: "{to_send}"
    response:
      status_code: 200
      json:
        value: "{to_send}"

---
test_name: Test combined parametrizing

includes:
  - !include common.yaml

marks:
  - parametrize:
      key:
        - edible
        - fruit
      vals:
        - [rotten, apple]
        - [fresh, orange]
        - [unripe, pear]

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{fruit}-{edible}"
    response:
      status_code: 200
      json:
        value: "{fruit}-{edible}"

---
test_name: Test combined parametrizing with normal parametrizing

includes:
  - !include common.yaml

marks:
  - parametrize:
      key:
        - edible
        - fruit
      vals:
        - [rotten, apple]
        - [fresh, orange]
        - [unripe, pear]
  - parametrize:
      key: to_send
      vals:
        - abc
        - def

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{fruit}-{edible}_{to_send}"
    response:
      status_code: 200
      json:
        value: "{fruit}-{edible}_{to_send}"

---
test_name: Test double combined parametrizing

includes:
  - !include common.yaml

marks:
  - parametrize:
      key:
        - edible
        - fruit
      vals:
        - [rotten, apple]
        - [fresh, orange]
        - [unripe, pear]
  - parametrize:
      key:
        - first_half
        - second_half
      vals:
        - [spear, mint]
        - [jack, fruit]

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{fruit}-{edible}_{first_half}-{second_half}"
    response:
      status_code: 200
      json:
        value: "{fruit}-{edible}_{first_half}-{second_half}"

---
test_name: Test include marks from a file

includes:
  - !include common.yaml

marks:
  - parametrize: !include parametrize_includes.yaml
  - parametrize:
      key:
        - first_half
        - second_half
      vals:
        - [spear, mint]
        - [jack, fruit]

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{fruit}-{edible}_{first_half}-{second_half}"
    response:
      status_code: 200
      json:
        value: "{fruit}-{edible}_{first_half}-{second_half}"

# Now fails at collection time
#---
#
#test_name: Test failing when key is a list and vals isn't
#
#_xfail: verify
#
#includes:
#  - !include common.yaml
#
#marks:
#  - parametrize:
#      key:
#        - edible
#        - fruit
#      vals:
#        - fresh
#        - orange
#
#stages:
#  - name: Echo back a unicode value and make sure it matches
#    request:
#      url: "{host}/echo"
#      method: POST
#      json:
#        value: "{fruit}-{edible}"
#    response:
#      status_code: 200
#      json:
#        value: "{fruit}-{edible}-nope"

# Now fails at collection time
#---
#
#test_name: Test failing when keys and values list lengths do not match
#
#_xfail: verify
#
#includes:
#  - !include common.yaml
#
#marks:
#  - parametrize:
#      key:
#        - edible
#        - fruit
#      vals:
#        - [fresh]
#
#stages:
#  - name: Echo back a unicode value and make sure it matches
#    request:
#      url: "{host}/echo"
#      method: POST
#      json:
#        value: "{fruit}-{edible}"
#    response:
#      status_code: 200
#      json:
#        value: "{fruit}-{edible}-nope"

---
test_name: Test parametrize from thing in common.yaml
includes:
  - !include common.yaml

marks:
  - parametrize:
      key: generic_str
      vals:
        # normal string
        - "{v_str}"
        # from env var
        - "{second_part}"
  - parametrize:
      key: edible
      vals:
        - rotten
        - fresh
        - unripe

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: "{generic_str}-{edible}"
    response:
      status_code: 200
      json:
        value: "{generic_str}-{edible}"

---
test_name: Test parametrize from thing in global config

marks:
  - parametrize:
      key: generic_str
      vals:
        # normal string
        - "{global_test_string_1}"
        # from env var
        - "{global_test_string_2}"
  - parametrize:
      key: edible
      vals:
        - rotten
        - fresh
        - unripe

stages:
  - name: Echo back a unicode value and make sure it matches
    request:
      url: "{global_host}/echo"
      method: POST
      json:
        value: "{generic_str}-{edible}"
    response:
      status_code: 200
      json:
        value: "{generic_str}-{edible}"

---
test_name: Test that double formatting something in

marks:
  - parametrize:
      key:
        - line
        - text
      vals:
        # NOTE: "\" requires doubling, !raw will take care of "{" and "}"
        - [1, "XYZ[\\]^_`abcdefghijk"]
        - [2, !raw "lmnopqrstuvwxyz{|}~*"]

stages:
  - name: Echo back parametrized text
    request:
      url: "{global_host}/echo"
      method: POST
      json:
        value: "{line}-{text}"
    response:
      status_code: 200
      json:
        value: "{line}-{text}"

---
test_name: Test parametrizing http method

marks:
  - parametrize:
      key: method
      vals:
        - POST
        - GET
        - DELETE

stages:
  - name: Make a request to the magic endpoint and expect method back
    request:
      url: "{global_host}/magic-multi-method"
      method: "{method}"
    response:
      status_code: 200
      json:
        method: "{method}"

---
test_name: Test parametrizing http method badly

marks:
  - parametrize:
      key: method
      vals:
        - Brean

_xfail: verify

stages:
  - name: Make a request to the magic endpoint and expect method back
    request:
      url: "{global_host}/magic-multi-method"
      method: "{method}"
    response:
      status_code: 200
      json:
        method: "{method}"

---
test_name: Test sending a list of keys

includes:
  - !include common.yaml

marks:
  - parametrize:
      key: edible
      vals:
        - [not, edible, at, all]

stages:
  - name: make sure list is sent and returned
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: !force_format_include "{edible}"
    response:
      status_code: 200
      json:
        value:
          - not
          - edible
          - at
          - all

---
test_name: Test sending a list of list of keys

includes:
  - !include common.yaml

marks:
  - parametrize:
      key:
        - edible
        - fruit
      vals:
        - [rotten, apple]
        - [poisonous, pear]

stages:
  - name: make sure list is sent and returned
    request:
      url: "{host}/echo"
      method: POST
      json:
        edibility: "{edible}"
        fruit: "{fruit}"
    response:
      status_code: 200
      json:
        edibility: "{edible}"
        fruit: "{fruit}"

---
test_name: Test sending a list of list of keys where one is not a string

includes:
  - !include common.yaml

marks:
  - parametrize:
      key:
        - fruit
        - colours
      vals:
        - [apple, [red, green, pink]]
        - [pear, [yellow, green]]

stages:
  - name: make sure list and sublist is sent and returned
    request:
      url: "{host}/echo"
      method: POST
      json:
        fruit: "{fruit}"
        colours: !force_format_include "{colours}"
    response:
      status_code: 200
      json:
        fruit: "{fruit}"
        colours: !force_format_include "{tavern.request_vars.json.colours}"

---
test_name: Test parametrizing with an ext function

marks:
  - parametrize:
      key: value_to_get
      vals:
        - goodbye
        - $ext:
            function: ext_functions:return_goodbye_string

stages:
  - name: Echo back parametrized value
    request:
      url: "{global_host}/echo"
      method: POST
      json:
        value: "{value_to_get}"
    response:
      status_code: 200
      json:
        value: "goodbye"

---
test_name: Test parametrizing with an ext function that returns a dict

marks:
  - parametrize:
      key: value_to_get
      vals:
        - hello: there
        - $ext:
            function: ext_functions:return_hello

stages:
  - name: Echo back parametrized value
    request:
      url: "{global_host}/echo"
      method: POST
      json: !force_format_include "{value_to_get}"
    response:
      status_code: 200
      json:
        hello: "there"

---
test_name: Test parametrizing with an ext function that returns a dict with supplemental data

marks:
  - parametrize:
      key: value_to_get
      vals:
        - and: this
          hello: there
        - and: this
          $ext:
            function: ext_functions:return_hello

stages:
  - name: Echo back parametrized value
    request:
      url: "{global_host}/echo"
      method: POST
      json: !force_format_include "{value_to_get}"
    response:
      status_code: 200
      json:
        hello: "there"
        and: this

#---
#
# NOTE: This fails immediately because it's impossible to resolve at the test level
#
#test_name: Test parametrizing with an ext function that returns a dict with supplemental data, but wrong function type
#
#_xfail: verify
#
#marks:
#- parametrize:
#    key: value_to_get
#    vals:
#    - and: this
#      $ext:
#        function: ext_functions:return_goodbye_string
#
#stages:
#- name: Echo back parametrized value
#  request:
#    url: "{global_host}/echo"
#    method: POST
#    json: !force_format_include "{value_to_get}"
#  response:
#    status_code: 200
#    json: {}
#
---
test_name: Test parametrizing random different data types in the same test

marks:
  - parametrize:
      key: value_to_send
      vals:
        - a
        - [b, c]
        - more: stuff
        - yet: [more, stuff]
        - $ext:
            function: ext_functions:return_goodbye_string
        - and: this
          $ext:
            function: ext_functions:return_hello

stages:
  - name: Echo back parametrized value
    request:
      url: "{global_host}/echo"
      method: POST
      json: !force_format_include "{value_to_send}"
    response:
      status_code: 200
      json: !force_format_include "{tavern.request_vars.json}"
