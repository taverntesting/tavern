# This is what we expect:
# top:
#   Thing: value
#   nested:
#     doubly:
#       inner: value
# an_integer: 123
# a_string: abc
# a_bool: true

---
test_name: Test setting 'strict' to a string fails

_xfail: verify

strict: fkd

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200

---
test_name: Test setting 'strict' to a dict fails

_xfail: verify

strict:
  json: true

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200

---
test_name: Test setting 'strict' to a list with invalid values fails

_xfail: verify

strict:
  - blokergh

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200

---
test_name: Test key matching matches headers case insensitive

includes:
  - !include common.yaml

stages:
  - name: Get with header
    request:
      url: "{host}/headers"
    response:
      status_code: 200
      headers:
        x-InTeGrAtIoN-vALUe: _HelloWorld1

---
test_name: Test strict key matching against body fails

_xfail: run

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # missing
        # a_bool: true

---
test_name: Test strict key matching against body fails with dict missing when specified in test

_xfail: run

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        # top:
        #   Thing: value
        #   nested:
        #     doubly:
        #       inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test strict key matching against body fails with dict missing when specified in stage

_xfail: run

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      strict:
        - json
      status_code: 200
      json:
        # top:
        #   Thing: value
        #   nested:
        #     doubly:
        #       inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test strict key matching against headers with mismatch body passes
# same as above, but changing 'strict' to only check headers should work

strict:
  - headers
  - json:off

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # missing
        # a_bool: true

---
test_name: Test strict key matching against exact body is fine when strict is specified in the test

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test strict key matching against exact body is fine when strict is specified in the stage

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test strict key matching works for specific test stages

includes:
  - !include common.yaml

strict:
  - json:off

stages:
  - name: match with one key missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # a_bool: true

  - name: match strictly for this stage
    request:
      url: "{host}/fake_dictionary"
    response:
      strict:
        - json
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

  - name: match with one key missing again, without 'strict' cascading through stages
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      json:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        # an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test non-strict key matching one list item

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match first item in list
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      strict: false
      json:
        - a

  - name: match a middle item in the list
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      #      Use new syntax
      strict:
        - json:off
      json:
        - c

  - name: match a number in the middle of the list
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      strict: false
      json:
        - 2

---
test_name: Test strict key matching one list item fails

_xfail: run

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match 'e' in list
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      strict: true
      json:
        - c

---
test_name: Test strict key matching works for specific test stages with false

includes:
  - !include common.yaml

stages:
  - name: match with one key missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      strict: False
      json:
        top:
          Thing: value
        an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test strict key matching works for specific test stages with true

_xfail: run

includes:
  - !include common.yaml

stages:
  - name: match with one key missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      strict: True
      json:
        top:
          Thing: value
        an_integer: 123
        a_string: abc
        a_bool: true

---
test_name: Test non-strict key matching one list item

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match 'e' in list
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      strict: false
      json:
        - c

---
test_name: Test matching any order on json

strict:
  - json:list_any_order

includes:
  - !include common.yaml

stages:
  - name: match some things in list, in any order
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      json:
        - 2
        - c
        - a
        - -3.0
        - 1

---
test_name: Test matching any order on json

includes:
  - !include common.yaml

stages:
  - name: match some things in list, in any order
    request:
      url: "{host}/fake_list"
    response:
      strict:
        - json:list_any_order
      status_code: 200
      json:
        - 2
        - c
        - a
        - -3.0
        - 1

---
test_name: Test matching any order on json nested

strict:
  - json:list_any_order

includes:
  - !include common.yaml

stages:
  - name: match some things in list, in any order
    request:
      url: "{host}/nested_list"
    response:
      status_code: 200
      json:
        top:
          - b
          - key: val
          - a

---
test_name: Test matching any order on json nested

includes:
  - !include common.yaml

stages:
  - name: match some things in list, in any order
    request:
      url: "{host}/nested_list"
    response:
      strict:
        - json:list_any_order
      status_code: 200
      json:
        top:
          - b
          - key: val

---
test_name: Test non-strict key matching in one stage does not leak over to the next

_xfail: run

includes:
  - !include common.yaml

stages:
  - name: match 'c' in list, strict false
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      strict: false
      json:
        - c

  - name: match 'c' in list, no strict
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      json:
        - c

---
test_name: Test strict key matching one list item fails

_xfail: run

strict:
  - json

includes:
  - !include common.yaml

stages:
  - name: match 'e' in list
    request:
      url: "{host}/fake_list"
    response:
      status_code: 200
      strict: true
      json:
        - c

---
test_name: strict test

_xfail: run

stages:
  - name: Simple get
    request:
      url: "{global_host}/707-regression"
      method: GET
    response:
      status_code: 200
      json:
        a: 1
        b:
          first: 10
          # second: 20
        c: 2

---
test_name: test empty list matches with strict json on

strict:
  - json:on

stages:
  - name: Simple get
    request:
      url: "{global_host}/606-regression-list"
      method: GET
    response:
      status_code: 200
      json: []

---
test_name: test full list does not match with strict json on

_xfail: run

strict:
  - json:on

stages:
  - name: Simple get
    request:
      url: "{global_host}/fake_list"
      method: GET
    response:
      status_code: 200
      json: []

---
test_name: test full list matches with strict json off

strict:
  - json:off

stages:
  - name: Simple get
    request:
      url: "{global_host}/fake_list"
      method: GET
    response:
      status_code: 200
      json: []

---
test_name: test empty dict matches with strict json on

strict:
  - json:on

stages:
  - name: Simple get
    request:
      url: "{global_host}/606-regression-dict"
      method: GET
    response:
      status_code: 200
      json: {}

---
test_name: test full dict does not match with strict json on

_xfail: run

strict:
  - json:on

stages:
  - name: Simple get
    request:
      url: "{global_host}/fake_dictionary"
      method: GET
    response:
      status_code: 200
      json: {}

---
test_name: test full dict matches with strict json off

strict:
  - json:off

stages:
  - name: Simple get
    request:
      url: "{global_host}/fake_dictionary"
      method: GET
    response:
      status_code: 200
      json: {}
