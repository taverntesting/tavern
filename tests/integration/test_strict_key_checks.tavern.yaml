# This is what we expect:
# top:
#   Thing: value
#   nested:
#     doubly:
#       inner: value
# an_integer: 123
# a_string: abc
# a_bool: true

---

test_name: Test setting 'strict' to a string fails

_xfail: verify

strict: fkd

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200

---

test_name: Test setting 'strict' to a dict fails

_xfail: verify

strict:
  body: true

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200

---

test_name: Test setting 'strict' to a list with invalid values fails

_xfail: verify

strict:
  - blokergh

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200

---

test_name: Test legacy key matching against body works
# should be removed in 1.0 when api changes

includes:
  - !include common.yaml

stages:
  - name: match with bool missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # a_bool: true

  - name: match with string missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        # a_string: abc
        a_bool: true

  - name: match with int missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        # an_integer: 123
        a_string: abc
        a_bool: true

  - name: match with dict missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        # top:
        #   Thing: value
        #   nested:
        #     doubly:
        #       inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---

test_name: Test strict key matching against body fails

_xfail: run

strict:
  - body

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # missing
        # a_bool: true

---

test_name: Test strict key matching against body fails with dict missing when specified in test

_xfail: run

strict:
  - body

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        # top:
        #   Thing: value
        #   nested:
        #     doubly:
        #       inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---

test_name: Test strict key matching against body fails with dict missing when specified in stage

_xfail: run

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      strict:
        - body
      status_code: 200
      body:
        # top:
        #   Thing: value
        #   nested:
        #     doubly:
        #       inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---

test_name: Test strict key matching against headers with mismatch body passes
# same as above, but changing 'strict' to only check headers should work

strict:
  - headers

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # missing
        # a_bool: true

---

test_name: Test strict key matching against exact body is fine when strict is specified in the test

strict:
  - body

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---

test_name: Test strict key matching against exact body is fine when strict is specified in the stage

strict:
  - body

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

---

test_name: Test strict key matching works for specific test stages

includes:
  - !include common.yaml

stages:
  - name: match with one key missing
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        # a_bool: true

  - name: match strictly for this stage
    request:
      url: "{host}/fake_dictionary"
    response:
      strict:
        - body
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc
        a_bool: true

  - name: match with one key missing again, without 'strict' cascading through stages
    request:
      url: "{host}/fake_dictionary"
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        # an_integer: 123
        a_string: abc
        a_bool: true
