---

test_name: Test mqtt message echo

includes:
  - !include common.yaml

paho-mqtt: &mqtt_spec
  # tls:
  #   enable: true
  connect:
    host: localhost
    port: 9001
    timeout: 3
  client:
    transport: websockets
    client_id: tavern-tester-{random_device_id}

stages:
  - &setup_device_for_test
    name: create device
    request:
      url: "{host}/create_device"
      method: PUT
      json:
        device_id: "{random_device_id}"
    response:
      status_code: 201

  - name: Echo text
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      payload: hello world
    mqtt_response:
      topic: /device/{random_device_id}/echo/response
      payload: hello world
      timeout: 5
      qos: 1

---

test_name: Test mqtt message echo json

includes:
  - !include common.yaml


paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Echo json
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      json:
        message: hello world
    mqtt_response:
      topic: /device/{random_device_id}/echo/response
      json:
        message: hello world
      timeout: 5
      qos: 1

---

test_name: Test mqtt message echo json formatted topic name

marks:
  - usefixtures:
    - get_publish_topic
    - get_response_topic_suffix

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Echo json
    mqtt_publish:
      topic: '{get_publish_topic}'
      json:
        message: hello world
    mqtt_response:
      topic: '/device/{random_device_id}/echo/{get_response_topic_suffix}'
      json:
        message: hello world
      timeout: 5
      qos: 1

---

test_name: Test mqtt message echo json with non strict checking

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

strict:
  - json:off

stages:
  - *setup_device_for_test

  - name: Check that at least part of response is echoed
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      json:
        key_1: message1
        key_2: message2
    mqtt_response:
      topic: /device/{random_device_id}/echo/response
      json:
        key_1: message1
      timeout: 5
      qos: 1

---

test_name: Test mqtt message match fails with strict on and non matching response

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

strict:
  - json:on

_xfail: run

stages:
  - *setup_device_for_test

  - name: Check that at least part of response is echoed
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      json:
        key_1: message1
        key_2: message2
    mqtt_response:
      topic: /device/{random_device_id}/echo/response
      json:
        key_1: message1
      timeout: 5
      qos: 1

---

test_name: Test ext functions work with MQTT

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Echo json
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      json:
        message: hello world
    mqtt_response:
      topic: /device/{random_device_id}/echo/response
      json:
        message: hello world
      timeout: 5
      qos: 1
      verify_response_with:
        function: testing_utils:message_says_hello

---

test_name: Test retain key

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Echo text with retain force on
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      payload: hello world
      retain: true
      qos: 1
    # NOTE: not subcribing to .../echo here

  # - name: Dummy ping request
  #   # wait to avoid false positive test from race condition
  #   delay_before: 1
  #   # This stage just exists to test subscription and retained messages
  #   mqtt_publish:
  #     topic: /device/123/ping
  #   # This is retained from the previous test
  #   mqtt_response:
  #     topic: /device/123/echo/response
  #     payload: hello world
  #     timeout: 5
  #     qos: 1

---

test_name: Test ping/pong with no payload

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: step 1 - ping/pong
    mqtt_publish:
      topic: /device/{random_device_id}/ping
    mqtt_response:
      topic: /device/{random_device_id}/pong
      timeout: 5
      qos: 1

---

test_name: Test ping/pong with ignored payload

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: step 1 - ping/pong
    mqtt_publish:
      topic: /device/{random_device_id}/ping
      payload: blaeruhg
    mqtt_response:
      topic: /device/{random_device_id}/pong
      timeout: 5
      qos: 1

---

test_name: Make sure posting publishes mqtt message

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: step 1 - post message trigger
    request:
      url: "{host}/send_mqtt_message"
      json:
        device_id: "{random_device_id}"
        payload: "hello"
      method: POST
      headers:
        content-type: application/json
    response:
      status_code: 200
      json:
        topic: "/device/{random_device_id}"
      headers:
        content-type: application/json
    mqtt_response:
      topic: /device/{random_device_id}
      payload: "hello"
      timeout: 5

---

test_name: Test posting mqtt message updates state on server

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: step 1 - get device state with lights off
    request:
      url: "{host}/get_device_state"
      params:
        device_id: "{random_device_id}"
      method: GET
      headers:
        content-type: application/json
    response:
      status_code: 200
      json:
        lights: "off"
      headers:
        content-type: application/json

  - name: step 2 - publish an mqtt message saying that the lights are now on
    mqtt_publish:
      topic: /device/{random_device_id}/lights
      qos: 1
      payload: "on"
    delay_after: 2

  - name: step 3 - get device state, lights now on
    request:
      url: "{host}/get_device_state"
      params:
        device_id: "{random_device_id}"
      method: GET
      headers:
        content-type: application/json
    response:
      status_code: 200
      json:
        lights: "on"
      headers:
        content-type: application/json

---

test_name: Test empty payload

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Check lights status is off
    mqtt_publish:
      topic: /device/{random_device_id}/status
    mqtt_response:
      topic: /device/{random_device_id}/status/response
      json:
        lights: 0
      timeout: 3
      qos: 1

  - name: Turn lights on
    mqtt_publish:
      topic: /device/{random_device_id}/lights
      qos: 1
      payload: "on"
    delay_after: 2

  - name: Check lights status is on
    mqtt_publish:
      topic: /device/{random_device_id}/status
    mqtt_response:
      topic: /device/{random_device_id}/status/response
      json:
        lights: 1
      timeout: 3
      qos: 1

---

test_name: Test can handle type tokens

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Test checking for lights status with anyint
    mqtt_publish:
      topic: /device/{random_device_id}/status
    mqtt_response:
      topic: /device/{random_device_id}/status/response
      json:
        lights: !anyint
      timeout: 3
      qos: 1

---

test_name: Test can handle anything token

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Test checking for lights status with anything with json
    mqtt_publish:
      topic: /device/{random_device_id}/status
    mqtt_response:
      topic: /device/{random_device_id}/status/response
      json:
        lights: !anything
      timeout: 3
      qos: 1

---

test_name: Test type token on non-json payload

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Test checking for lights status with anything with payload
    mqtt_publish:
      topic: /device/{random_device_id}/status
    mqtt_response:
      topic: /device/{random_device_id}/status/response
      payload: !anything
      timeout: 3
      qos: 1

---

test_name: Test raw token formatting in response

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: Echo json
    mqtt_publish:
      topic: /device/{random_device_id}/echo
      json:
        message: !raw "Hello {world}"
    mqtt_response:
      topic: /device/{random_device_id}/echo/response
      json:
        message: !raw "Hello {world}"
      timeout: 5
      qos: 1

---

test_name: Test can use type token with mqtt port

includes:
  - !include common.yaml

paho-mqtt:
  client:
    transport: websockets
    client_id: tavern-tester-{random_device_id}
  connect:
    host: "{mqtt_host}"
    port: !int "{mqtt_port:d}"
    timeout: 3

stages:
  - *setup_device_for_test

  - name: step 1 - ping/pong
    mqtt_publish:
      topic: /device/{random_device_id}/ping
    mqtt_response:
      topic: /device/{random_device_id}/pong
      timeout: 5
      qos: 1

---

test_name: Test get both statuses

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: create device 2
    request:
      url: "{host}/create_device"
      method: PUT
      json:
        device_id: "3487589234754"

  - name: step 1 - ping/pong
    mqtt_publish:
      topic: /devices/status
    mqtt_response:
      - topic: /device/{random_device_id}/status/response
        payload: !anything
        timeout: 3
        qos: 1
      - topic: /device/3487589234754/status/response
        payload: !anything
        timeout: 3
        qos: 1

---

test_name: Test out of order responses

includes:
  - !include common.yaml

paho-mqtt: *mqtt_spec

stages:
  - *setup_device_for_test

  - name: create device 2
    request:
      url: "{host}/create_device"
      method: PUT
      json:
        device_id: "43676974864576"

  - name: step 1 - ping/pong
    mqtt_publish:
      topic: /devices/status
    mqtt_response:
      - topic: /device/43676974864576/status/response
        payload: !anything
        timeout: 3
        qos: 1
      - topic: /device/{random_device_id}/status/response
        payload: !anything
        timeout: 3
        qos: 1
