load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_python//python:packaging.bzl", "py_wheel")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//:def.bzl", "GAZELLE_PYTHON_RUNTIME_DEPS")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("@tavern_pip//:requirements.bzl", "all_whl_requirements")
load("//bazel:lint.bzl", "file_count_rule")

exports_files([
    "pyproject.toml",
    ".flake8",
    "MODULE.bazel.lock",
])

py_wheel(
    name = "tavern_wheel",
    author = "Michael Boulton",
    classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Framework :: Pytest",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Utilities",
        "Topic :: Software Development :: Testing",
        "License :: OSI Approved :: MIT License",
    ],
    console_scripts = {"tavern-ci": "tavern.entry:main"},
    description_file = "README.md",
    distribution = "tavern",
    entry_points = {
        "console_scripts": ["tavern-ci = tavern.entry:main"],
        "pytest11": ["tavern = tavern.testutils.pytesthook"],
        "tavern_http": ["requests = tavern._plugins.rest.tavernhook:TavernRestPlugin"],
        "tavern_mqtt": ["paho-mqtt = tavern._plugins.mqtt.tavernhook"],
    },
    homepage = "https://taverntesting.github.io/",
    license = "MIT",
    python_tag = "py3",
    requires = [
        "PyYAML>=5.3.1,<7",
        "pykwalify>=1.8.0,<2",
        "requests>=2.22.0,<3",
        "pyjwt>=2.4.0,<3",
        "paho-mqtt>=1.3.1,<=1.5.1",
        "jmespath<1",
        "pytest>=6.2,<8",
        "python-box>4,<6",
        "stevedore>=3.5.2,<4",
    ],
    version = "2.11.0",
    visibility = ["//visibility:public"],
    deps = [
        "//tavern",
        "//tavern/_core/pytest",
        "//tavern/_core/schema",
        "//tavern/_plugins",
        "//tavern/_plugins/mqtt",
        "//tavern/_plugins/rest",
    ],
)

# gazelle:lang py
# gazelle:exclude bazel-*
# gazelle:exclude build
# gazelle:exclude dist
# gazelle:exclude example
# gazelle:exclude .git
# gazelle:exclude .github
# gazelle:exclude .idea
# gazelle:exclude .ijwb
# gazelle:exclude .pytest_cache
# gazelle:exclude .mypy_cache
# gazelle:exclude .ruff_cache
# gazelle:exclude **/__pycache__
# gazelle:exclude .run
# gazelle:exclude scripts
# gazelle:exclude tavern.egg-info
# gazelle:exclude .tox
# gazelle:exclude docs/

# gazelle:resolve py _pytest @tavern_pip_pytest//:pkg
# gazelle:resolve py grpc @tavern_pip_grpcio//:pkg
# gazelle:resolve py grpc_status @tavern_pip_grpcio_status//:pkg
# gazelle:resolve py google @tavern_pip_protobuf//:pkg
# gazelle:resolve py proto @tavern_pip_protobuf//:pkg
# gazelle:resolve py grpc_reflection @tavern_pip_grpcio_reflection//:pkg

compile_pip_requirements(
    name = "requirements",
    src = "//:pyproject.toml",
    extra_args = [
        "--all-extras",
        "--allow-unsafe",
        "--resolver=backtracking",
    ],
    tags = ["requires-network"],
)

modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    #    pip_repository_incremental = True,
    pip_repository_name = "tavern_pip",
    requirements = "//:requirements.txt",
)

gazelle(
    name = "gazelle",
    data = GAZELLE_PYTHON_RUNTIME_DEPS,
    gazelle = "@rules_python_gazelle_plugin//python:gazelle_binary",
)

#file_count_rule(
#    name = "file_count",
#    deps = [":tavern_wheel"],
#)

test_suite(
    name = "unit_tests",
    tests = [
        "//tests:test_doctest",
        "//tests/unit:unit_test_response_test_mqtt_response",
        "//tests/unit:unit_test_response_test_rest",
        "//tests/unit:unit_test_test_call_run",
        "//tests/unit:unit_test_test_core",
        "//tests/unit:unit_test_test_helpers",
        "//tests/unit:unit_test_test_mqtt",
        "//tests/unit:unit_test_test_pytest_hooks",
        "//tests/unit:unit_test_test_request",
        "//tests/unit:unit_test_test_schema",
        "//tests/unit:unit_test_test_strict_util",
        "//tests/unit:unit_test_test_utilities",
    ],
)

test_suite(
    name = "integration_tests",
    tests = [
        "//example/advanced:integration_test_test_server.tavern.yaml",
        "//example/components:integration_test_test_hello.tavern.yaml",
        "//example/components:integration_test_test_ping.tavern.yaml",
        "//example/cookies:integration_test_test_server.tavern.yaml",
        "//example/mqtt:integration_test_test_mqtt.tavern.yaml",
        "//example/mqtt:integration_test_test_mqtt_failures.tavern.yaml",
        "//tests/integration:integration_test_test_allure.tavern.yaml",
        "//tests/integration:integration_test_test_auth_key.tavern.yaml",
        "//tests/integration:integration_test_test_certs.tavern.yaml",
        "//tests/integration:integration_test_test_cookie_remember.tavern.yaml",
        "//tests/integration:integration_test_test_cookies.tavern.yaml",
        "//tests/integration:integration_test_test_data_key.tavern.yaml",
        "//tests/integration:integration_test_test_env_var_format.tavern.yaml",
        "//tests/integration:integration_test_test_error.tavern.yaml",
        "//tests/integration:integration_test_test_external_functions.tavern.yaml",
        "//tests/integration:integration_test_test_files.tavern.yaml",
        "//tests/integration:integration_test_test_fixtures.tavern.yaml",
        "//tests/integration:integration_test_test_follow_redirects.tavern.yaml",
        "//tests/integration:integration_test_test_header_comparisons.tavern.yaml",
        "//tests/integration:integration_test_test_helpers.tavern.yaml",
        "//tests/integration:integration_test_test_jmes.tavern.yaml",
        "//tests/integration:integration_test_test_parametrize.tavern.yaml",
        "//tests/integration:integration_test_test_regex.tavern.yaml",
        "//tests/integration:integration_test_test_response_types.tavern.yaml",
        "//tests/integration:integration_test_test_retry.tavern.yaml",
        "//tests/integration:integration_test_test_save_dict_value.tavern.yaml",
        "//tests/integration:integration_test_test_selective_tests.tavern.yaml",
        "//tests/integration:integration_test_test_skipped_tests.tavern.yaml",
        "//tests/integration:integration_test_test_status_codes.tavern.yaml",
        "//tests/integration:integration_test_test_stream.tavern.yaml",
        "//tests/integration:integration_test_test_strict_key_checks.tavern.yaml",
        "//tests/integration:integration_test_test_timeout.tavern.yaml",
        "//tests/integration:integration_test_test_typetokens.tavern.yaml",
        "//tests/integration:integration_test_test_validate_pykwalify.tavern.yaml",
    ],
)
